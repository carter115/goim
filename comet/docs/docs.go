// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-06-02 18:23:34.4736113 +0800 CST m=+0.570032601

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "Home"
                ],
                "summary": "首页",
                "responses": {
                    "200": {}
                }
            }
        },
        "/auth": {
            "get": {
                "tags": [
                    "认证"
                ],
                "summary": "生成Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "用户名",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "密码",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/hello": {
            "get": {
                "tags": [
                    "Home"
                ],
                "summary": "hello rpc",
                "parameters": [
                    {
                        "type": "string",
                        "description": "名字",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/message/send": {
            "post": {
                "description": "\u003cli\u003e1. id: 消息唯一ID\u003c/li\u003e\u003cli\u003e\u003cb\u003e2. srcId: 发送该消息的ID\u003c/b\u003e\u003c/li\u003e\u003cli\u003e3. dstId: 接收消息的ID\u003c/li\u003e\u003cli\u003e\u003cb\u003e4. msgType: 消息类型(1聊天室 2单聊 3群聊 4广播 5组播)\u003c/b\u003e\u003c/li\u003e\u003cli\u003e5. content: 消息内容\u003c/li\u003e\u003cli\u003e6. resType: 资源类型(1图片 2声音 3视频)\u003c/li\u003e\u003cli\u003e6. resUrl: 资源URL\u003c/li\u003e\u003cli\u003e7. CreateTime: 消息创建时间\u003c/li\u003e\u003cli\u003e8. ReadTime: 读消息时间\u003c/li\u003e",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "消息"
                ],
                "summary": "发送消息",
                "parameters": [
                    {
                        "description": "消息体",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.Response"
                        }
                    }
                }
            }
        },
        "/room/join": {
            "post": {
                "tags": [
                    "房间管理"
                ],
                "summary": "用户加入房间",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "房间ID",
                        "name": "mid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "用户ID",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/room/leave": {
            "post": {
                "tags": [
                    "房间管理"
                ],
                "summary": "用户离开房间",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "房间ID",
                        "name": "mid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "用户ID",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/room/member/{mid}": {
            "get": {
                "tags": [
                    "房间管理"
                ],
                "summary": "该房间用户列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "房间ID",
                        "name": "mid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/ws/close": {
            "get": {
                "tags": [
                    "websocket"
                ],
                "summary": "关闭websocket连接",
                "parameters": [
                    {
                        "type": "string",
                        "description": "用户ID",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/ws/connect": {
            "get": {
                "tags": [
                    "websocket"
                ],
                "summary": "发起websocket连接",
                "parameters": [
                    {
                        "type": "string",
                        "description": "用户ID",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "房间ID",
                        "name": "mid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/ws/list": {
            "get": {
                "tags": [
                    "websocket"
                ],
                "summary": "列出websocket连接用户",
                "responses": {
                    "200": {}
                }
            }
        }
    },
    "definitions": {
        "swagger.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "dstId": {
                    "type": "string"
                },
                "msgType": {
                    "type": "integer"
                },
                "resType": {
                    "type": "integer"
                },
                "resUrl": {
                    "type": "string"
                },
                "srcId": {
                    "type": "string"
                }
            }
        },
        "swagger.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "msg": {
                    "type": "string"
                },
                "result": {
                    "type": "object"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Gmimo Server",
	Description: "IM服务",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
